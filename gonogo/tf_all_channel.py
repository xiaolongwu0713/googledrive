# raw data generated by preprocessing scripts in Matlab temporally, including 0-400hz bandpass filter and a 50hz notch filter

import hdf5storage
import os
import numpy as np
import matplotlib.pyplot as plt
from mne.time_frequency import tfr_morlet

from gonogo.config import *

sid=5 #4
data_dir='/Volumes/Samsung_T5/data/ruijin/gonogo/preprocessing/P'+str(sid)
plot_dir=data_dir + '/tfPlot/'
if not os.path.exists(plot_dir):
    os.makedirs(plot_dir)

#Session_num,UseChn,EmgChn,TrigChn = get_channel_setting(sid)
#original_fs=[Frequencies[i,1] for i in range(Frequencies.shape[0]) if Frequencies[i,0] == pn][0]
loadPath = data_dir+'/preprocessing/preprocessingv2.mat'
mat=hdf5storage.loadmat(loadPath)
fs=mat['Fs']
rtime=mat['ReactionTime']
rtime=np.concatenate((rtime[0,0],rtime[0,1]),axis=0)
data=mat['DATA']
data=np.concatenate((data[0,0],data[0,1]),axis=0) #(2160440, 63)
events=mat['Trigger']
events=np.concatenate((events[0,0],events[0,1]),axis=0) # two sessions
events[:, [1,2]] = events[:, [2,1]] # swap 1st and 2nd column to: timepoint, duration, event code
events=events.astype(int)

del mat

chn_num=data.shape[1]

event1=events[(events[:,2]==1)]
event2=events[(events[:,2]==2)]
event34_index=[i or j for (i,j) in zip((events[:,2]==3), (events[:,2]==4))]
event34=events[event34_index]
event56_index=[i or j for (i,j) in zip((events[:,2]==5), (events[:,2]==6))]
event56=events[event56_index]
event1112_index=[i or j for (i,j) in zip((events[:,2]==11), (events[:,2]==12))]
event1112=events[event1112_index]
event2122_index=[i or j for (i,j) in zip((events[:,2]==21), (events[:,2]==22))]
event2122=events[event2122_index]
event11=events[(events[:,2]==11)]
#event12=events[(events[:,2]==12)]

chn_names=np.asarray(["seeg"]*chn_num)
chn_types=np.asarray(["seeg"]*chn_num)
info = mne.create_info(ch_names=list(chn_names), ch_types=list(chn_types), sfreq=fs)
raw = mne.io.RawArray(data.transpose(), info)

epoch1=mne.Epochs(raw, event1, tmin=-1, tmax=4,baseline=None) # fixed 3s
epoch2=mne.Epochs(raw, event2, tmin=-1, tmax=4,baseline=None) # fixed 3s
epoch34=mne.Epochs(raw, event34, tmin=-3, tmax=1,baseline=None) # varying reaction time, 3s maximum
epoch56=mne.Epochs(raw, event56, tmin=-3, tmax=1,baseline=None) # varying reaction time, 3s maximum
epoch1112=mne.Epochs(raw, event1112, tmin=-7, tmax=6,baseline=None) # 3s task cue and 3s executing cue
epoch2122=mne.Epochs(raw, event2122, tmin=0, tmax=3,baseline=None) # 3s executing cue
epoch11=mne.Epochs(raw, event11, tmin=-7, tmax=3.5,baseline=None)
#epoch12=mne.Epochs(raw, event12, tmin=-7, tmax=6,baseline=None)

cnv1112 = epoch1112.load_data().copy().pick(picks=['seeg']).filter(l_freq=0.1, h_freq=250) # evoked data
cnv11_avg=cnv1112['11'].average(method='mean') # evoked.data returns the underlying data
cnv12_avg=cnv1112['12'].average(method='mean')
cnv11_avg.plot()

cnv1112b = epoch1112.load_data().copy().pick(picks=['seeg']).filter(l_freq=0.1, h_freq=35) # evoked data
cnv11b_avg=cnv1112b['11'].average(method='mean') # evoked.data returns the underlying data
cnv12b_avg=cnv1112b['12'].average(method='mean')
cnv11b_avg.pick(picks=['seeg-57']).plot()



## frequency analysis
# define frequencies of interest (log-spaced)
fMin,fMax=2,150
fstep=1
freqs=np.arange(fMin,fMax,fstep) #148
fNum=freqs.shape[0]
#freqs = np.linspace(fMin,fMax, num=fNum)
cycleMin,cycleMax=8,50
cycleNum=fNum
#n_cycles = np.linspace(cycleMin,cycleMax, num=cycleNum)  # different number of cycle per frequency
n_cycles=freqs/2
#lowCycles=30
#n_cycles=[8]*lowCycles + [50]*(fNum-lowCycles)

averagePower=[] # access: averagePower[chn_index][mi/me]=2D, for example: averagePower[0][0]=2D tf data, 0th ch and 0th paradigm.
decim=4
new_fs=1000/decim
for chIndex in range(chn_num):
    if chIndex%20 == 0:
        print('TF analysis on '+str(chIndex)+'th channel.')
    # decim will decrease the sfreq, so 15s will becomes 5s afterward.
    averagePower.append(np.squeeze(tfr_morlet(epoch11, picks=[chIndex],
              freqs=freqs, n_cycles=n_cycles,use_fft=True,return_itc=False, average=True, decim=decim, n_jobs=1).data))
    #averagePower.append(tfr_morlet(epoch11, picks=[chIndex],
    #           freqs=freqs, n_cycles=n_cycles,use_fft=True,return_itc=False, average=True, decim=decim, n_jobs=1))

# exam the first tf: picks=[0]
example=tfr_morlet(epoch11, picks=[0],freqs=freqs, n_cycles=n_cycles,use_fft=True,return_itc=False, average=True, decim=decim, n_jobs=1)
fig, ax = plt.subplots()
example.plot(baseline=(-7,-6), vmin=-4,vmax=4,mode='zscore', title='test',axes=ax)

# crop the original power data because there is artifact at the beginning and end of the trial.
power=[] # power[0][0].shape: (148, 2000)
crop=0.2 #0.5s
shift=int(crop*new_fs)
if crop > 0:
    for channel in range(chn_num):
        power.append([])
        power[channel]=averagePower[channel][:,shift:-shift]
else:
    power = averagePower


baseline = [int(1),int(0.8*new_fs)]
tick_time_offset=[1,4,7,10]
tickpos=[int(i* new_fs)-int(crop*new_fs) for i in tick_time_offset]
ticklabel=['1st task cue','2nd task cue','1st exe cue','cue end']

#(300, 5001)
vmin=-4
vmax=4
fig, ax = plt.subplots()
print('Ploting out to '+plot_dir+'.')
for channel in range(chn_num):
    if channel%20 == 0:
        print('Ploting '+str(channel)+'th channel.')
    base=power[channel][:,baseline[0]:baseline[1]] #base[0]:(148, 250)
    basemean=np.mean(base,1) #basemean[0]:(148,)
    basestd=np.std(base,1)
    tmp=(power[channel]-basemean[:,None])/basestd[:,None]

    im0=ax.imshow(tmp,origin='lower',cmap='RdBu_r',vmin=vmin, vmax=vmax)
    ax.set_aspect('auto')

    ax.set_xticks(tickpos)
    ax.set_xticklabels(ticklabel)

    #plot vertical lines
    for x_value in tickpos:
        ax.axvline(x=x_value)
        ax.axvline(x=x_value)
    #fig.colorbar(im, ax=ax0)
    fig.colorbar(im0, orientation="vertical",fraction=0.046, pad=0.02,ax=ax)

    # save
    figname = plot_dir + 'tf_compare_'+str(channel) + '.pdf'
    fig.savefig(figname)

    # clean up plotting area
    ax.images[-1].colorbar.remove()
    ax.cla()
plt.close(fig)
